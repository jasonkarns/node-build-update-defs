#!/usr/bin/env bash

# scrapes, commits, pushes, and pull-requests new node definitions
#
# Usage: script/update-nodes [-o ORIGIN] [-r FORK]
#
# Options:
#   -o ORIGIN    The remote to which the pull-request will be opened.
#                [default: origin]
#   -r FORK      The remote to which scraped definitions will be pushed.
#                [default: derived from hub-fork]
#                (Empty-string is a shortcut for 'origin': `-r ''`.)
#
# Notes: inspired by https://github.com/jasonkarns/brew-publish

set -eufo pipefail
IFS=$'\n\t'

abort() {
  echo "$1" >&2
  exit 1
}

# change to repo-root;
# allows the script to be invoked via `npm explore -- npm run defs:commit`
# however, it will fail if this package is installed as a git-dep
cd "$(git rev-parse --show-toplevel)" || abort "ERROR: Can't get to correct directory"

if ! type -p hub >/dev/null; then
  abort "ERROR: You have to install hub to proceed."
fi

while getopts ":o:r:" opt; do
  case $opt in
  o) origin="${OPTARG}" ;;
  r) fork="${OPTARG:-origin}" ;;
  :) abort "Option -$OPTARG requires an argument." ;;
  \?) abort "Invalid option: -$OPTARG" ;;
  esac
done

: "${origin:=origin}"
# hackish way of getting the git remote name for user's fork
: "${fork:=$(hub fork 2>&1 | grep -oE 'remote:? \S+' | tail -1 | awk '{print $2}')}"

# This returns 'HEAD' if in detached HEAD state. Useless in that case.
orig_branch=$(git rev-parse --abbrev-ref HEAD)

git fetch --quiet --unshallow "$origin" main 2>/dev/null || git fetch --quiet "$origin" master
git checkout --quiet -B latest-scraped-definitions "$origin"/main

npm run scrape-definitions
npm run commit-definitions
hub pull-request

git checkout --quiet "$orig_branch"
