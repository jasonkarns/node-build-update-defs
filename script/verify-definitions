#!/usr/bin/env bash
# Usage: script/verify-definitions (- | -- FILES... | COMMIT_RANGE)
#   script/verify-definitions -             # verify definition files listed on STDIN
#   script/verify-definitions -- foo        # verify specific files by name
#   script/verify-definitions COMMIT_RANGE  # verify definitions modified in COMMIT_RANGE

set -eufo pipefail
IFS=$'\n\t'

help_text() {
  sed -ne '/^#/!q;s/.\{1,2\}//;1d;p' <"$0"
}

compute_sha2() {
  local output
  output="$(openssl dgst -sha256)"
  echo "${output##* }" | tr '[:upper:]' '[:lower:]'
}

download_package() {
  curl -qsSfL -o "$2" "$1"
}

download_and_verify() {
  local checksum
  local url="$1"
  local file="$2"
  local expected="$3"
  download_package "$url" "$file" || return $?
  checksum="$(compute_sha2 <"$file")"
  if [ "$checksum" != "$expected" ]; then
    {
      echo "Error: $url doesn't match its checksum:"
      echo "  expected: $expected"
      echo "    actual: $checksum"
    } >&2
    return 1
  fi
}

changed_files() {
  local commit_range="$1"
  git diff --name-only --diff-filter=ACMR "$commit_range" -- ./share/node-build
}

extract_urls() {
  $(type -p ggrep grep | head -1) -hoEe 'http[^"]+#[^"]*' | sort | uniq
}

verify_files() {
  xargs cat | extract_urls
}

potentially_new_packages() {
  local commit_range="$1"

  changed_files "$commit_range"
}

verify() {
  local url checksum file status=0
  while read -r url; do
    checksum="${url#*#}"
    url="${url%#*}"
    echo "Verifying checksum for $url"
    file="${TMPDIR:-/tmp}/$checksum"
    download_and_verify "$url" "$file" "$checksum" || ((status += 1))
  done < <(xargs cat | extract_urls)

  if [ "$status" != 0 ]; then
    echo "failures: $status"
    return 1
  fi
}

case "${1-}" in
'')
  {
    echo "COMMIT_RANGE or FILES required"
    help_text
  } >&2
  exit 1
  ;;
-h | --help)
  help_text
  ;;
-)
  verify
  ;;
--)
  echo "$@" | verify
  ;;
*)
  echo "Verifying changes from $1"
  changed_files "$1"
  potentially_new_packages "$1" | verify
  ;;
esac
